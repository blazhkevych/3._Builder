/*
								Builder
	Спроектировать программу, которая будет симулировать процесс
сборки автомобилей, другими словами будет создавать объект класса
транспортного средства и наделять его свойствами, которые характерны
конкретному автомобилю.
	Конкретные данные для программы:

----------------------------------------------------------------------------
Имя механизма		Корпус		Двигатель(л. с)		Колеса (R)		К. П. П.
----------------------------------------------------------------------------
Daewoo Lanos		Седан		98					13				5 Manual
Ford Probe			Купе		160					14				4 Auto
UAZ Patriot			Универсал	120					16				4 Manual
----------------------------------------------------------------------------

	Для проектирования приложения используйте паттерн Builder, где каждый
автомобиль будет классом product, а каждый завод по построению тех или
иных транспортных средств будет ConcreteBuilder. Класс Shop будет
аналогом класса Director.

	После построения приложения дополните его еще одним автомобилем:

----------------------------------------------------------------------------
Имя механизма		Корпус		Двигатель(л. с)		Колеса (R)		К. П. П.
----------------------------------------------------------------------------
Hyundai Getz		Хетчбэк		66					13				4 auto
----------------------------------------------------------------------------
 */

 /* Паттерн Строитель отделяет конструирование сложного объекта от его представления, так что
		 в результате одного и того же процесса конструирования могут получаться разные представления.
	  Применимость.
		 - алгоритм создания сложного объекта не должен зависеть от того, из каких частей состоит объект и как они стыкуются между собой.
		 - процесс конструирования должен обеспечивать различные представления конструируемого объекта.
	 Достоинства паттерна строитель и его применения:
	  - позволяет изменять внутреннее представление продукта.
	  - изолирует код, реализующий конструирование и представление.
	  - дает более тонкий контроль над процессом конструирования.
 */

#include <iostream>
#include <Windows.h>

#include "DaewooLanosVehicleBuilder.h"
#include "FordProbeVehicleBuilder.h"
#include "HyundaiGetzVehicleBuilder.h"
#include "Shop.h"
#include "UAZPatriotVehicleBuilder.h"
#include "VehicleBuilder.h"

 // Клиент создает объект-распорядитель Director и конфигурирует его нужным объектом-строителем Builder.
void Client(VehicleBuilder* builder)
{
	Shop shop;
	shop.SetVehicleBuilder(builder);
	shop.ConstructVehicle();
	Vehicle vehicle = shop.GetVehicle();
	vehicle.ShowVehicle();
}

int main()
{
	SetConsoleCP(1251);
	/*
	Задает кодовую страницу ввода, используемую консолью, связанной с вызывающим процессом.
	Консоль использует страницу входного кода для преобразования ввода с клавиатуры
	в соответствующее символьное значение.
	*/
	SetConsoleOutputCP(1251);
	/*
	Задает выходную кодовую страницу, используемую консолью, связанной с вызывающим процессом.
	Консоль использует свою кодовую страницу вывода для преобразования символьных значений,
	записанных различными функциями вывода, в изображения, отображаемые в окне консоли.
	*/

	VehicleBuilder* builder1 = new DaewooLanosVehicleBuilder();
	Client(builder1);
	delete builder1;


	VehicleBuilder* builder2 = new FordProbeVehicleBuilder();
	Client(builder2);
	delete builder2;

	VehicleBuilder* builder3 = new UAZPatriotVehicleBuilder();
	Client(builder3);
	delete builder3;

	VehicleBuilder* builder4 = new HyundaiGetzVehicleBuilder();
	Client(builder4);
	delete builder4;
}